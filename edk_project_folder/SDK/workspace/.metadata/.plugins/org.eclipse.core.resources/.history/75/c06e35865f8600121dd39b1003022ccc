#include "xemaclite_udp.h"


static u8 LocalAddress[XEL_MAC_ADDR_SIZE] = MAC_ADDRESS_SOURCE;
static u8 RemoteAddress[XEL_MAC_ADDR_SIZE] = MAC_ADDRESS_DEST;

u8 ips[4] = IP_ADDRESS_SOURCE;// source IP address//////
u8 ipd[4] = IP_ADDRESS_DEST;// destination IP address//////


u8 TxFrame[MAX_MAC_FRAME_SIZE];
MAC_IP_UDP_Header* mac_ip_udp_header = (MAC_IP_UDP_Header*)&TxFrame;
u8* mac_ip_udp_payload = (&TxFrame)+sizeof(MAC_IP_UDP_Header);

int my_xemac_init(u16 DeviceId, XEmacLite *EmacLiteInstPtr, XEmacLite_Config *ConfigPtr) {

	int Status;

	ConfigPtr = XEmacLite_LookupConfig(DeviceId);
	if (ConfigPtr == NULL) {
			return XST_FAILURE;
		}
	Status = XEmacLite_CfgInitialize(EmacLiteInstPtr,
						ConfigPtr,
						ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XEmacLite_SetMacAddress(EmacLiteInstPtr, LocalAddress);

	XEmacLite_FlushReceive(EmacLiteInstPtr);

	if (XEmacLite_TxBufferAvailable(EmacLiteInstPtr) != TRUE) {
		return XST_FAILURE;
	}



	return XST_SUCCESS;
}



int EmacLiteSendFrame(XEmacLite *InstancePtr, u32 PayloadSize)
{
	mac_ip_udp_header->mac_dest[0] = RemoteAddress[0];
	mac_ip_udp_header->mac_dest[1] = RemoteAddress[1];
	mac_ip_udp_header->mac_dest[2] = RemoteAddress[2];
	mac_ip_udp_header->mac_dest[3] = RemoteAddress[3];
	mac_ip_udp_header->mac_dest[4] = RemoteAddress[4];
	mac_ip_udp_header->mac_dest[5] = RemoteAddress[5];

	mac_ip_udp_header->mac_src[0] = LocalAddress[0];
	mac_ip_udp_header->mac_src[1] = LocalAddress[1];
	mac_ip_udp_header->mac_src[2] = LocalAddress[2];
	mac_ip_udp_header->mac_src[3] = LocalAddress[3];
	mac_ip_udp_header->mac_src[4] = LocalAddress[4];
	mac_ip_udp_header->mac_src[5] = LocalAddress[5];


	mac_ip_udp_header->mac_protocol[0] = 0x08;
	mac_ip_udp_header->mac_protocol[1] = 0x00;

	///////////////////////////////////////////////////////////////////////
	///////////////////// IP Header ///////////////////////////////////////
	mac_ip_udp_header->version_length = 0x45;/// Version and Header Length (Fixed)
	mac_ip_udp_header->ds_ec = 0;
	/// Always 0
	/// Total length of the UDP Packet: 28 header bytes + 4 data bytes
	mac_ip_udp_header->ip_length_h = (28+ITP_PACKET_SIZE)/256;
	mac_ip_udp_header->ip_length_l = (28+ITP_PACKET_SIZE)%256;

	mac_ip_udp_header->id_h = 0;
	mac_ip_udp_header->id_l = 0;
	/// Packet ID is zero
	mac_ip_udp_header->fragments_h = 0;
	mac_ip_udp_header->fragments_l = 0;

	/// No fragments
	mac_ip_udp_header->time_to_live = 128; /// Time to live = 128 seconds
	mac_ip_udp_header->protocol = 0x11;/// Set IP protocol to UDP
	/// Header Checksum - will be assigned later
	mac_ip_udp_header->head_checksum_h = 0;
	mac_ip_udp_header->head_checksum_l = 0;
	///////////////////////////////////////////////////////////////////////
	///////////////////// Set source IP address ///////////////////////////
	mac_ip_udp_header->src_ip[0] = ips[0];
	mac_ip_udp_header->src_ip[1] = ips[1];
	mac_ip_udp_header->src_ip[2] = ips[2];
	mac_ip_udp_header->src_ip[3] = ips[3];
	///////////////////////////////////////////////////////////////////////
	////////////////////// Set destination IP address /////////////////////
	mac_ip_udp_header->dst_ip[0] = ipd[0];
	mac_ip_udp_header->dst_ip[1] = ipd[1];
	mac_ip_udp_header->dst_ip[2] = ipd[2];
	mac_ip_udp_header->dst_ip[3] = ipd[3];
	///////////////////////////////////////////////////////////////////////
	////////////////////// Set source and destination ports ///////////////
	mac_ip_udp_header->src_port_h = 50000/256; // Source Port: match your PC code
	mac_ip_udp_header->src_port_l = 50000%256;

	mac_ip_udp_header->dst_port_h = 50000/256; // Destination Port: match your PC code
	mac_ip_udp_header->dst_port_l = 50000%256; // Destination Port: match your PC code
	///////////////////////////////////////////////////////////////////////
	// UDP Packet Length = 8 UDP Header Bytes + 4 Data Bytes
	mac_ip_udp_header->length_h = (8 + ITP_PACKET_SIZE)/256;
	mac_ip_udp_header->length_l = (8 + ITP_PACKET_SIZE)%256;

	mac_ip_udp_header->checksum_h = 0;
	mac_ip_udp_header->checksum_l = 0;

	// Data checksum, not used - set to zero

	///////////////////////////////////////////////////////////////////////
	////// Calculate IP header check sum (not including MAC header ////////
	mac_ip_udp_header->head_checksum_h = GetCheckSum ((void *)&(mac_ip_udp_header->version_length))/256;
	mac_ip_udp_header->head_checksum_l = GetCheckSum ((void *)&(mac_ip_udp_header->version_length))%256;




	u8 *FramePtr;
	int Index;
	FramePtr = (u8 *)TxFrame;

		/*
		 * Fill in the valid Destination MAC address if
		 * the Loopback is not enabled.
		 */
		FramePtr++;
		FramePtr++;
		FramePtr++;
		FramePtr++;
		FramePtr++;
		FramePtr++;

	/*
	 * Fill in the source MAC address.
	 */
		FramePtr++;
		FramePtr++;
		FramePtr++;
		FramePtr++;
		FramePtr++;
		FramePtr++;

	/*
	 * Set up the type/length field - be sure its in network order.
	 */
    //*((u16 *)FramePtr) = Xil_Htons(PayloadSize);
   	FramePtr++;
	FramePtr++;

	/*
	 * Now fill in the data field with known values so we can verify them
	 * on receive.
	 */
	for (Index = 0; Index < PayloadSize; Index++) {
		*mac_ip_udp_payload++ = (u8)43;
	}

	/*
	 * Now send the frame.
	 */
	return XEmacLite_Send(InstancePtr, (u8 *)TxFrame, PayloadSize + sizeof(MAC_IP_UDP_Header));

}

/////////////////////////////////////////////////////////////////////////////
/// Calculate the checksum required to send with the IP packet header.
/////////////////////////////////////////////////////////////////////////////
u16 GetCheckSum (void *packet)
{
	u16 t1 = (u16)(*((u16*)packet));
	u16 t2 = (u16)(*((u16*)packet+1));
	u16 t3 = (u16)(*((u16*)packet+2));
	u16 t4 = (u16)(*((u16*)packet+3));
	u16 t5 = (u16)(*((u16*)packet+4));
	u16 t6 = (u16)(*((u16*)packet+5));
	u16 t7 = (u16)(*((u16*)packet+6));
	u16 t8 = (u16)(*((u16*)packet+7));
	u16 t9 = (u16)(*((u16*)packet+8));
	u16 t10 = (u16)(*((u16*)packet+9));
	long sum = t1 + t2 + t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10;
	u16 p1 = sum & 0x0000FFFF;
	u16 p2 = (sum>>16) & 0x0000FFFF;
	u16 moresum = p1 + p2;
	return ~moresum;
}
/////////////////////////////////////////////////////////////////////////////


